/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Person: PersonObject
      Project: ProjectObject
      Tag: TagObject
      PersonConnection: PersonConnectionObject
      PageInfo: PageInfoObject
      PersonEdge: PersonEdgeObject
      AggregatePerson: AggregatePersonObject
      ProjectConnection: ProjectConnectionObject
      ProjectEdge: ProjectEdgeObject
      AggregateProject: AggregateProjectObject
      TagConnection: TagConnectionObject
      TagEdge: TagEdgeObject
      AggregateTag: AggregateTagObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PersonSubscriptionPayload: PersonSubscriptionPayloadObject
      PersonPreviousValues: PersonPreviousValuesObject
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadObject
      ProjectPreviousValues: ProjectPreviousValuesObject
      TagSubscriptionPayload: TagSubscriptionPayloadObject
      TagPreviousValues: TagPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Person: PersonFieldDetails
      Project: ProjectFieldDetails
      Tag: TagFieldDetails
      PersonConnection: PersonConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PersonEdge: PersonEdgeFieldDetails
      AggregatePerson: AggregatePersonFieldDetails
      ProjectConnection: ProjectConnectionFieldDetails
      ProjectEdge: ProjectEdgeFieldDetails
      AggregateProject: AggregateProjectFieldDetails
      TagConnection: TagConnectionFieldDetails
      TagEdge: TagEdgeFieldDetails
      AggregateTag: AggregateTagFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PersonSubscriptionPayload: PersonSubscriptionPayloadFieldDetails
      PersonPreviousValues: PersonPreviousValuesFieldDetails
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadFieldDetails
      ProjectPreviousValues: ProjectPreviousValuesFieldDetails
      TagSubscriptionPayload: TagSubscriptionPayloadFieldDetails
      TagPreviousValues: TagPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PersonWhereUniqueInput: PersonWhereUniqueInputInputObject
      ProjectWhereInput: ProjectWhereInputInputObject
      TagWhereInput: TagWhereInputInputObject
      PersonWhereInput: PersonWhereInputInputObject
      ProjectWhereUniqueInput: ProjectWhereUniqueInputInputObject
      TagWhereUniqueInput: TagWhereUniqueInputInputObject
      PersonCreateInput: PersonCreateInputInputObject
      ProjectCreateManyWithoutPeopleInput: ProjectCreateManyWithoutPeopleInputInputObject
      ProjectCreateWithoutPeopleInput: ProjectCreateWithoutPeopleInputInputObject
      TagCreateManyWithoutProjectsInput: TagCreateManyWithoutProjectsInputInputObject
      TagCreateWithoutProjectsInput: TagCreateWithoutProjectsInputInputObject
      PersonUpdateInput: PersonUpdateInputInputObject
      ProjectUpdateManyWithoutPeopleInput: ProjectUpdateManyWithoutPeopleInputInputObject
      ProjectUpdateWithWhereUniqueWithoutPeopleInput: ProjectUpdateWithWhereUniqueWithoutPeopleInputInputObject
      ProjectUpdateWithoutPeopleDataInput: ProjectUpdateWithoutPeopleDataInputInputObject
      TagUpdateManyWithoutProjectsInput: TagUpdateManyWithoutProjectsInputInputObject
      TagUpdateWithWhereUniqueWithoutProjectsInput: TagUpdateWithWhereUniqueWithoutProjectsInputInputObject
      TagUpdateWithoutProjectsDataInput: TagUpdateWithoutProjectsDataInputInputObject
      TagUpsertWithWhereUniqueWithoutProjectsInput: TagUpsertWithWhereUniqueWithoutProjectsInputInputObject
      TagScalarWhereInput: TagScalarWhereInputInputObject
      TagUpdateManyWithWhereNestedInput: TagUpdateManyWithWhereNestedInputInputObject
      TagUpdateManyDataInput: TagUpdateManyDataInputInputObject
      ProjectUpsertWithWhereUniqueWithoutPeopleInput: ProjectUpsertWithWhereUniqueWithoutPeopleInputInputObject
      ProjectScalarWhereInput: ProjectScalarWhereInputInputObject
      ProjectUpdateManyWithWhereNestedInput: ProjectUpdateManyWithWhereNestedInputInputObject
      ProjectUpdateManyDataInput: ProjectUpdateManyDataInputInputObject
      PersonUpdateManyMutationInput: PersonUpdateManyMutationInputInputObject
      ProjectCreateInput: ProjectCreateInputInputObject
      PersonCreateManyWithoutProjectsInput: PersonCreateManyWithoutProjectsInputInputObject
      PersonCreateWithoutProjectsInput: PersonCreateWithoutProjectsInputInputObject
      ProjectUpdateInput: ProjectUpdateInputInputObject
      PersonUpdateManyWithoutProjectsInput: PersonUpdateManyWithoutProjectsInputInputObject
      PersonUpdateWithWhereUniqueWithoutProjectsInput: PersonUpdateWithWhereUniqueWithoutProjectsInputInputObject
      PersonUpdateWithoutProjectsDataInput: PersonUpdateWithoutProjectsDataInputInputObject
      PersonUpsertWithWhereUniqueWithoutProjectsInput: PersonUpsertWithWhereUniqueWithoutProjectsInputInputObject
      PersonScalarWhereInput: PersonScalarWhereInputInputObject
      PersonUpdateManyWithWhereNestedInput: PersonUpdateManyWithWhereNestedInputInputObject
      PersonUpdateManyDataInput: PersonUpdateManyDataInputInputObject
      ProjectUpdateManyMutationInput: ProjectUpdateManyMutationInputInputObject
      TagCreateInput: TagCreateInputInputObject
      ProjectCreateManyWithoutTagsInput: ProjectCreateManyWithoutTagsInputInputObject
      ProjectCreateWithoutTagsInput: ProjectCreateWithoutTagsInputInputObject
      TagUpdateInput: TagUpdateInputInputObject
      ProjectUpdateManyWithoutTagsInput: ProjectUpdateManyWithoutTagsInputInputObject
      ProjectUpdateWithWhereUniqueWithoutTagsInput: ProjectUpdateWithWhereUniqueWithoutTagsInputInputObject
      ProjectUpdateWithoutTagsDataInput: ProjectUpdateWithoutTagsDataInputInputObject
      ProjectUpsertWithWhereUniqueWithoutTagsInput: ProjectUpsertWithWhereUniqueWithoutTagsInputInputObject
      TagUpdateManyMutationInput: TagUpdateManyMutationInputInputObject
      PersonSubscriptionWhereInput: PersonSubscriptionWhereInputInputObject
      ProjectSubscriptionWhereInput: ProjectSubscriptionWhereInputInputObject
      TagSubscriptionWhereInput: TagSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ProjectOrderByInput: ProjectOrderByInputValues,
    TagOrderByInput: TagOrderByInputValues,
    PersonOrderByInput: PersonOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'person', args?: QueryPersonArgs[] | false, alias?: string  } 
  | { name: 'persons', args?: QueryPersonsArgs[] | false, alias?: string  } 
  | { name: 'personsConnection', args?: QueryPersonsConnectionArgs[] | false, alias?: string  } 
  | { name: 'project', args?: QueryProjectArgs[] | false, alias?: string  } 
  | { name: 'projects', args?: QueryProjectsArgs[] | false, alias?: string  } 
  | { name: 'projectsConnection', args?: QueryProjectsConnectionArgs[] | false, alias?: string  } 
  | { name: 'tag', args?: QueryTagArgs[] | false, alias?: string  } 
  | { name: 'tags', args?: QueryTagsArgs[] | false, alias?: string  } 
  | { name: 'tagsConnection', args?: QueryTagsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'person'
  | 'persons'
  | 'personsConnection'
  | 'project'
  | 'projects'
  | 'projectsConnection'
  | 'tag'
  | 'tags'
  | 'tagsConnection'


type QueryPersonArgs =
  | 'where'
type QueryPersonsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPersonsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectArgs =
  | 'where'
type QueryProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTagArgs =
  | 'where'
type QueryTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTagsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  person: {
    type: 'Person'
    args: Record<QueryPersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PersonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  persons: {
    type: 'Person'
    args: Record<QueryPersonsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PersonWhereInput | null, orderBy?: prisma.PersonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person[]> | prisma.Person[]
  }
  personsConnection: {
    type: 'PersonConnection'
    args: Record<QueryPersonsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PersonWhereInput | null, orderBy?: prisma.PersonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonConnection> | prisma.PersonConnection
  }
  project: {
    type: 'Project'
    args: Record<QueryProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  projects: {
    type: 'Project'
    args: Record<QueryProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
  projectsConnection: {
    type: 'ProjectConnection'
    args: Record<QueryProjectsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectConnection> | prisma.ProjectConnection
  }
  tag: {
    type: 'Tag'
    args: Record<QueryTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag | null> | prisma.Tag | null
  }
  tags: {
    type: 'Tag'
    args: Record<QueryTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TagWhereInput | null, orderBy?: prisma.TagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag[]> | prisma.Tag[]
  }
  tagsConnection: {
    type: 'TagConnection'
    args: Record<QueryTagsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TagWhereInput | null, orderBy?: prisma.TagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagConnection> | prisma.TagConnection
  }
}
  

// Types for Person

type PersonObject =
  | PersonFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'gcId', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'projects', args?: PersonProjectsArgs[] | false, alias?: string  } 

type PersonFields =
  | 'id'
  | 'gcId'
  | 'name'
  | 'projects'


type PersonProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PersonFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  gcId: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  projects: {
    type: 'Project'
    args: Record<PersonProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Person">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
}
  

// Types for Project

type ProjectObject =
  | ProjectFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'tags', args?: ProjectTagsArgs[] | false, alias?: string  } 
  | { name: 'people', args?: ProjectPeopleArgs[] | false, alias?: string  } 

type ProjectFields =
  | 'id'
  | 'name'
  | 'description'
  | 'tags'
  | 'people'


type ProjectTagsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProjectPeopleArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tags: {
    type: 'Tag'
    args: Record<ProjectTagsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: { where?: TagWhereInput | null, orderBy?: prisma.TagOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag[]> | prisma.Tag[]
  }
  people: {
    type: 'Person'
    args: Record<ProjectPeopleArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: { where?: PersonWhereInput | null, orderBy?: prisma.PersonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person[]> | prisma.Person[]
  }
}
  

// Types for Tag

type TagObject =
  | TagFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'projects', args?: TagProjectsArgs[] | false, alias?: string  } 

type TagFields =
  | 'id'
  | 'name'
  | 'projects'


type TagProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TagFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  projects: {
    type: 'Project'
    args: Record<TagProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Tag">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
}
  

// Types for PersonConnection

type PersonConnectionObject =
  | PersonConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PersonConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PersonConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PersonEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PersonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonEdge[]> | prisma.PersonEdge[]
  }
  aggregate: {
    type: 'AggregatePerson'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePerson> | prisma.AggregatePerson
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PersonEdge

type PersonEdgeObject =
  | PersonEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PersonEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PersonEdgeFieldDetails {
  node: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePerson

type AggregatePersonObject =
  | AggregatePersonFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePersonFields =
  | 'count'



  

export interface AggregatePersonFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectConnection

type ProjectConnectionObject =
  | ProjectConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectEdge[]> | prisma.ProjectEdge[]
  }
  aggregate: {
    type: 'AggregateProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProject> | prisma.AggregateProject
  }
}
  

// Types for ProjectEdge

type ProjectEdgeObject =
  | ProjectEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectEdgeFieldDetails {
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProject

type AggregateProjectObject =
  | AggregateProjectFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectFields =
  | 'count'



  

export interface AggregateProjectFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TagConnection

type TagConnectionObject =
  | TagConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TagConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TagConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TagEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagEdge[]> | prisma.TagEdge[]
  }
  aggregate: {
    type: 'AggregateTag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTag> | prisma.AggregateTag
  }
}
  

// Types for TagEdge

type TagEdgeObject =
  | TagEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TagEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TagEdgeFieldDetails {
  node: {
    type: 'Tag'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag> | prisma.Tag
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTag

type AggregateTagObject =
  | AggregateTagFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTagFields =
  | 'count'



  

export interface AggregateTagFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPerson', args?: MutationCreatePersonArgs[] | false, alias?: string  } 
  | { name: 'updatePerson', args?: MutationUpdatePersonArgs[] | false, alias?: string  } 
  | { name: 'updateManyPersons', args?: MutationUpdateManyPersonsArgs[] | false, alias?: string  } 
  | { name: 'upsertPerson', args?: MutationUpsertPersonArgs[] | false, alias?: string  } 
  | { name: 'deletePerson', args?: MutationDeletePersonArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPersons', args?: MutationDeleteManyPersonsArgs[] | false, alias?: string  } 
  | { name: 'createProject', args?: MutationCreateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateProject', args?: MutationUpdateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjects', args?: MutationUpdateManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'upsertProject', args?: MutationUpsertProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteProject', args?: MutationDeleteProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjects', args?: MutationDeleteManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'createTag', args?: MutationCreateTagArgs[] | false, alias?: string  } 
  | { name: 'updateTag', args?: MutationUpdateTagArgs[] | false, alias?: string  } 
  | { name: 'updateManyTags', args?: MutationUpdateManyTagsArgs[] | false, alias?: string  } 
  | { name: 'upsertTag', args?: MutationUpsertTagArgs[] | false, alias?: string  } 
  | { name: 'deleteTag', args?: MutationDeleteTagArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTags', args?: MutationDeleteManyTagsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPerson'
  | 'updatePerson'
  | 'updateManyPersons'
  | 'upsertPerson'
  | 'deletePerson'
  | 'deleteManyPersons'
  | 'createProject'
  | 'updateProject'
  | 'updateManyProjects'
  | 'upsertProject'
  | 'deleteProject'
  | 'deleteManyProjects'
  | 'createTag'
  | 'updateTag'
  | 'updateManyTags'
  | 'upsertTag'
  | 'deleteTag'
  | 'deleteManyTags'


type MutationCreatePersonArgs =
  | 'data'
type MutationUpdatePersonArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPersonsArgs =
  | 'data'
  | 'where'
type MutationUpsertPersonArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePersonArgs =
  | 'where'
type MutationDeleteManyPersonsArgs =
  | 'where'
type MutationCreateProjectArgs =
  | 'data'
type MutationUpdateProjectArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectArgs =
  | 'where'
type MutationDeleteManyProjectsArgs =
  | 'where'
type MutationCreateTagArgs =
  | 'data'
type MutationUpdateTagArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTagsArgs =
  | 'data'
  | 'where'
type MutationUpsertTagArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTagArgs =
  | 'where'
type MutationDeleteManyTagsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPerson: {
    type: 'Person'
    args: Record<MutationCreatePersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PersonCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  updatePerson: {
    type: 'Person'
    args: Record<MutationUpdatePersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PersonUpdateInput, where: PersonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  updateManyPersons: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPersonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PersonUpdateManyMutationInput, where?: PersonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPerson: {
    type: 'Person'
    args: Record<MutationUpsertPersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PersonWhereUniqueInput, create: PersonCreateInput, update: PersonUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person> | prisma.Person
  }
  deletePerson: {
    type: 'Person'
    args: Record<MutationDeletePersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PersonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  deleteManyPersons: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPersonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PersonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProject: {
    type: 'Project'
    args: Record<MutationCreateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  updateProject: {
    type: 'Project'
    args: Record<MutationUpdateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateInput, where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updateManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateManyMutationInput, where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProject: {
    type: 'Project'
    args: Record<MutationUpsertProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput, create: ProjectCreateInput, update: ProjectUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  deleteProject: {
    type: 'Project'
    args: Record<MutationDeleteProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  deleteManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTag: {
    type: 'Tag'
    args: Record<MutationCreateTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TagCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag> | prisma.Tag
  }
  updateTag: {
    type: 'Tag'
    args: Record<MutationUpdateTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TagUpdateInput, where: TagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag | null> | prisma.Tag | null
  }
  updateManyTags: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TagUpdateManyMutationInput, where?: TagWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTag: {
    type: 'Tag'
    args: Record<MutationUpsertTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TagWhereUniqueInput, create: TagCreateInput, update: TagUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag> | prisma.Tag
  }
  deleteTag: {
    type: 'Tag'
    args: Record<MutationDeleteTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TagWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag | null> | prisma.Tag | null
  }
  deleteManyTags: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TagWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'person', args?: SubscriptionPersonArgs[] | false, alias?: string  } 
  | { name: 'project', args?: SubscriptionProjectArgs[] | false, alias?: string  } 
  | { name: 'tag', args?: SubscriptionTagArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'person'
  | 'project'
  | 'tag'


type SubscriptionPersonArgs =
  | 'where'
type SubscriptionProjectArgs =
  | 'where'
type SubscriptionTagArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  person: {
    type: 'PersonSubscriptionPayload'
    args: Record<SubscriptionPersonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PersonSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonSubscriptionPayload | null> | prisma.PersonSubscriptionPayload | null
  }
  project: {
    type: 'ProjectSubscriptionPayload'
    args: Record<SubscriptionProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectSubscriptionPayload | null> | prisma.ProjectSubscriptionPayload | null
  }
  tag: {
    type: 'TagSubscriptionPayload'
    args: Record<SubscriptionTagArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TagSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagSubscriptionPayload | null> | prisma.TagSubscriptionPayload | null
  }
}
  

// Types for PersonSubscriptionPayload

type PersonSubscriptionPayloadObject =
  | PersonSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PersonSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PersonSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PersonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Person'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PersonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Person | null> | prisma.Person | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PersonPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PersonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PersonPreviousValues | null> | prisma.PersonPreviousValues | null
  }
}
  

// Types for PersonPreviousValues

type PersonPreviousValuesObject =
  | PersonPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'gcId', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type PersonPreviousValuesFields =
  | 'id'
  | 'gcId'
  | 'name'



  

export interface PersonPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  gcId: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectSubscriptionPayload

type ProjectSubscriptionPayloadObject =
  | ProjectSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectPreviousValues | null> | prisma.ProjectPreviousValues | null
  }
}
  

// Types for ProjectPreviousValues

type ProjectPreviousValuesObject =
  | ProjectPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 

type ProjectPreviousValuesFields =
  | 'id'
  | 'name'
  | 'description'



  

export interface ProjectPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TagSubscriptionPayload

type TagSubscriptionPayloadObject =
  | TagSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TagSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TagSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Tag'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tag | null> | prisma.Tag | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TagPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TagSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagPreviousValues | null> | prisma.TagPreviousValues | null
  }
}
  

// Types for TagPreviousValues

type TagPreviousValuesObject =
  | TagPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type TagPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface TagPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface PersonWhereUniqueInput {
  id?: string | null
  gcId?: number | null
}
export type PersonWhereUniqueInputInputObject =
  | Extract<keyof PersonWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'gcId', alias?: string  } 
  
export interface ProjectWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  tags_every?: TagWhereInput | null
  tags_some?: TagWhereInput | null
  tags_none?: TagWhereInput | null
  people_every?: PersonWhereInput | null
  people_some?: PersonWhereInput | null
  people_none?: PersonWhereInput | null
  AND?: ProjectWhereInput[]
  OR?: ProjectWhereInput[]
  NOT?: ProjectWhereInput[]
}
export type ProjectWhereInputInputObject =
  | Extract<keyof ProjectWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'tags_every', alias?: string  } 
  | { name: 'tags_some', alias?: string  } 
  | { name: 'tags_none', alias?: string  } 
  | { name: 'people_every', alias?: string  } 
  | { name: 'people_some', alias?: string  } 
  | { name: 'people_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TagWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  projects_every?: ProjectWhereInput | null
  projects_some?: ProjectWhereInput | null
  projects_none?: ProjectWhereInput | null
  AND?: TagWhereInput[]
  OR?: TagWhereInput[]
  NOT?: TagWhereInput[]
}
export type TagWhereInputInputObject =
  | Extract<keyof TagWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'projects_every', alias?: string  } 
  | { name: 'projects_some', alias?: string  } 
  | { name: 'projects_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PersonWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  gcId?: number | null
  gcId_not?: number | null
  gcId_in?: number[]
  gcId_not_in?: number[]
  gcId_lt?: number | null
  gcId_lte?: number | null
  gcId_gt?: number | null
  gcId_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  projects_every?: ProjectWhereInput | null
  projects_some?: ProjectWhereInput | null
  projects_none?: ProjectWhereInput | null
  AND?: PersonWhereInput[]
  OR?: PersonWhereInput[]
  NOT?: PersonWhereInput[]
}
export type PersonWhereInputInputObject =
  | Extract<keyof PersonWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'gcId', alias?: string  } 
  | { name: 'gcId_not', alias?: string  } 
  | { name: 'gcId_in', alias?: string  } 
  | { name: 'gcId_not_in', alias?: string  } 
  | { name: 'gcId_lt', alias?: string  } 
  | { name: 'gcId_lte', alias?: string  } 
  | { name: 'gcId_gt', alias?: string  } 
  | { name: 'gcId_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'projects_every', alias?: string  } 
  | { name: 'projects_some', alias?: string  } 
  | { name: 'projects_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type ProjectWhereUniqueInputInputObject =
  | Extract<keyof ProjectWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface TagWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type TagWhereUniqueInputInputObject =
  | Extract<keyof TagWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PersonCreateInput {
  id?: string | null
  gcId?: number | null
  name?: string
  projects?: ProjectCreateManyWithoutPeopleInput | null
}
export type PersonCreateInputInputObject =
  | Extract<keyof PersonCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'gcId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectCreateManyWithoutPeopleInput {
  create?: ProjectCreateWithoutPeopleInput[]
  connect?: ProjectWhereUniqueInput[]
}
export type ProjectCreateManyWithoutPeopleInputInputObject =
  | Extract<keyof ProjectCreateManyWithoutPeopleInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutPeopleInput {
  id?: string | null
  name?: string
  description?: string
  tags?: TagCreateManyWithoutProjectsInput | null
}
export type ProjectCreateWithoutPeopleInputInputObject =
  | Extract<keyof ProjectCreateWithoutPeopleInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface TagCreateManyWithoutProjectsInput {
  create?: TagCreateWithoutProjectsInput[]
  connect?: TagWhereUniqueInput[]
}
export type TagCreateManyWithoutProjectsInputInputObject =
  | Extract<keyof TagCreateManyWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TagCreateWithoutProjectsInput {
  id?: string | null
  name?: string
}
export type TagCreateWithoutProjectsInputInputObject =
  | Extract<keyof TagCreateWithoutProjectsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PersonUpdateInput {
  gcId?: number | null
  name?: string | null
  projects?: ProjectUpdateManyWithoutPeopleInput | null
}
export type PersonUpdateInputInputObject =
  | Extract<keyof PersonUpdateInput, string>
  | { name: 'gcId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectUpdateManyWithoutPeopleInput {
  create?: ProjectCreateWithoutPeopleInput[]
  delete?: ProjectWhereUniqueInput[]
  connect?: ProjectWhereUniqueInput[]
  set?: ProjectWhereUniqueInput[]
  disconnect?: ProjectWhereUniqueInput[]
  update?: ProjectUpdateWithWhereUniqueWithoutPeopleInput[]
  upsert?: ProjectUpsertWithWhereUniqueWithoutPeopleInput[]
  deleteMany?: ProjectScalarWhereInput[]
  updateMany?: ProjectUpdateManyWithWhereNestedInput[]
}
export type ProjectUpdateManyWithoutPeopleInputInputObject =
  | Extract<keyof ProjectUpdateManyWithoutPeopleInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectUpdateWithWhereUniqueWithoutPeopleInput {
  where?: ProjectWhereUniqueInput
  data?: ProjectUpdateWithoutPeopleDataInput
}
export type ProjectUpdateWithWhereUniqueWithoutPeopleInputInputObject =
  | Extract<keyof ProjectUpdateWithWhereUniqueWithoutPeopleInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateWithoutPeopleDataInput {
  name?: string | null
  description?: string | null
  tags?: TagUpdateManyWithoutProjectsInput | null
}
export type ProjectUpdateWithoutPeopleDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutPeopleDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface TagUpdateManyWithoutProjectsInput {
  create?: TagCreateWithoutProjectsInput[]
  delete?: TagWhereUniqueInput[]
  connect?: TagWhereUniqueInput[]
  set?: TagWhereUniqueInput[]
  disconnect?: TagWhereUniqueInput[]
  update?: TagUpdateWithWhereUniqueWithoutProjectsInput[]
  upsert?: TagUpsertWithWhereUniqueWithoutProjectsInput[]
  deleteMany?: TagScalarWhereInput[]
  updateMany?: TagUpdateManyWithWhereNestedInput[]
}
export type TagUpdateManyWithoutProjectsInputInputObject =
  | Extract<keyof TagUpdateManyWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TagUpdateWithWhereUniqueWithoutProjectsInput {
  where?: TagWhereUniqueInput
  data?: TagUpdateWithoutProjectsDataInput
}
export type TagUpdateWithWhereUniqueWithoutProjectsInputInputObject =
  | Extract<keyof TagUpdateWithWhereUniqueWithoutProjectsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TagUpdateWithoutProjectsDataInput {
  name?: string | null
}
export type TagUpdateWithoutProjectsDataInputInputObject =
  | Extract<keyof TagUpdateWithoutProjectsDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface TagUpsertWithWhereUniqueWithoutProjectsInput {
  where?: TagWhereUniqueInput
  update?: TagUpdateWithoutProjectsDataInput
  create?: TagCreateWithoutProjectsInput
}
export type TagUpsertWithWhereUniqueWithoutProjectsInputInputObject =
  | Extract<keyof TagUpsertWithWhereUniqueWithoutProjectsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TagScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: TagScalarWhereInput[]
  OR?: TagScalarWhereInput[]
  NOT?: TagScalarWhereInput[]
}
export type TagScalarWhereInputInputObject =
  | Extract<keyof TagScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TagUpdateManyWithWhereNestedInput {
  where?: TagScalarWhereInput
  data?: TagUpdateManyDataInput
}
export type TagUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TagUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TagUpdateManyDataInput {
  name?: string | null
}
export type TagUpdateManyDataInputInputObject =
  | Extract<keyof TagUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ProjectUpsertWithWhereUniqueWithoutPeopleInput {
  where?: ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutPeopleDataInput
  create?: ProjectCreateWithoutPeopleInput
}
export type ProjectUpsertWithWhereUniqueWithoutPeopleInputInputObject =
  | Extract<keyof ProjectUpsertWithWhereUniqueWithoutPeopleInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: ProjectScalarWhereInput[]
  OR?: ProjectScalarWhereInput[]
  NOT?: ProjectScalarWhereInput[]
}
export type ProjectScalarWhereInputInputObject =
  | Extract<keyof ProjectScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectUpdateManyWithWhereNestedInput {
  where?: ProjectScalarWhereInput
  data?: ProjectUpdateManyDataInput
}
export type ProjectUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateManyDataInput {
  name?: string | null
  description?: string | null
}
export type ProjectUpdateManyDataInputInputObject =
  | Extract<keyof ProjectUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface PersonUpdateManyMutationInput {
  gcId?: number | null
  name?: string | null
}
export type PersonUpdateManyMutationInputInputObject =
  | Extract<keyof PersonUpdateManyMutationInput, string>
  | { name: 'gcId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ProjectCreateInput {
  id?: string | null
  name?: string
  description?: string
  tags?: TagCreateManyWithoutProjectsInput | null
  people?: PersonCreateManyWithoutProjectsInput | null
}
export type ProjectCreateInputInputObject =
  | Extract<keyof ProjectCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'people', alias?: string  } 
  
export interface PersonCreateManyWithoutProjectsInput {
  create?: PersonCreateWithoutProjectsInput[]
  connect?: PersonWhereUniqueInput[]
}
export type PersonCreateManyWithoutProjectsInputInputObject =
  | Extract<keyof PersonCreateManyWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PersonCreateWithoutProjectsInput {
  id?: string | null
  gcId?: number | null
  name?: string
}
export type PersonCreateWithoutProjectsInputInputObject =
  | Extract<keyof PersonCreateWithoutProjectsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'gcId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ProjectUpdateInput {
  name?: string | null
  description?: string | null
  tags?: TagUpdateManyWithoutProjectsInput | null
  people?: PersonUpdateManyWithoutProjectsInput | null
}
export type ProjectUpdateInputInputObject =
  | Extract<keyof ProjectUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'people', alias?: string  } 
  
export interface PersonUpdateManyWithoutProjectsInput {
  create?: PersonCreateWithoutProjectsInput[]
  delete?: PersonWhereUniqueInput[]
  connect?: PersonWhereUniqueInput[]
  set?: PersonWhereUniqueInput[]
  disconnect?: PersonWhereUniqueInput[]
  update?: PersonUpdateWithWhereUniqueWithoutProjectsInput[]
  upsert?: PersonUpsertWithWhereUniqueWithoutProjectsInput[]
  deleteMany?: PersonScalarWhereInput[]
  updateMany?: PersonUpdateManyWithWhereNestedInput[]
}
export type PersonUpdateManyWithoutProjectsInputInputObject =
  | Extract<keyof PersonUpdateManyWithoutProjectsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PersonUpdateWithWhereUniqueWithoutProjectsInput {
  where?: PersonWhereUniqueInput
  data?: PersonUpdateWithoutProjectsDataInput
}
export type PersonUpdateWithWhereUniqueWithoutProjectsInputInputObject =
  | Extract<keyof PersonUpdateWithWhereUniqueWithoutProjectsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PersonUpdateWithoutProjectsDataInput {
  gcId?: number | null
  name?: string | null
}
export type PersonUpdateWithoutProjectsDataInputInputObject =
  | Extract<keyof PersonUpdateWithoutProjectsDataInput, string>
  | { name: 'gcId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PersonUpsertWithWhereUniqueWithoutProjectsInput {
  where?: PersonWhereUniqueInput
  update?: PersonUpdateWithoutProjectsDataInput
  create?: PersonCreateWithoutProjectsInput
}
export type PersonUpsertWithWhereUniqueWithoutProjectsInputInputObject =
  | Extract<keyof PersonUpsertWithWhereUniqueWithoutProjectsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PersonScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  gcId?: number | null
  gcId_not?: number | null
  gcId_in?: number[]
  gcId_not_in?: number[]
  gcId_lt?: number | null
  gcId_lte?: number | null
  gcId_gt?: number | null
  gcId_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: PersonScalarWhereInput[]
  OR?: PersonScalarWhereInput[]
  NOT?: PersonScalarWhereInput[]
}
export type PersonScalarWhereInputInputObject =
  | Extract<keyof PersonScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'gcId', alias?: string  } 
  | { name: 'gcId_not', alias?: string  } 
  | { name: 'gcId_in', alias?: string  } 
  | { name: 'gcId_not_in', alias?: string  } 
  | { name: 'gcId_lt', alias?: string  } 
  | { name: 'gcId_lte', alias?: string  } 
  | { name: 'gcId_gt', alias?: string  } 
  | { name: 'gcId_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PersonUpdateManyWithWhereNestedInput {
  where?: PersonScalarWhereInput
  data?: PersonUpdateManyDataInput
}
export type PersonUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PersonUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PersonUpdateManyDataInput {
  gcId?: number | null
  name?: string | null
}
export type PersonUpdateManyDataInputInputObject =
  | Extract<keyof PersonUpdateManyDataInput, string>
  | { name: 'gcId', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ProjectUpdateManyMutationInput {
  name?: string | null
  description?: string | null
}
export type ProjectUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface TagCreateInput {
  id?: string | null
  name?: string
  projects?: ProjectCreateManyWithoutTagsInput | null
}
export type TagCreateInputInputObject =
  | Extract<keyof TagCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectCreateManyWithoutTagsInput {
  create?: ProjectCreateWithoutTagsInput[]
  connect?: ProjectWhereUniqueInput[]
}
export type ProjectCreateManyWithoutTagsInputInputObject =
  | Extract<keyof ProjectCreateManyWithoutTagsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutTagsInput {
  id?: string | null
  name?: string
  description?: string
  people?: PersonCreateManyWithoutProjectsInput | null
}
export type ProjectCreateWithoutTagsInputInputObject =
  | Extract<keyof ProjectCreateWithoutTagsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'people', alias?: string  } 
  
export interface TagUpdateInput {
  name?: string | null
  projects?: ProjectUpdateManyWithoutTagsInput | null
}
export type TagUpdateInputInputObject =
  | Extract<keyof TagUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'projects', alias?: string  } 
  
export interface ProjectUpdateManyWithoutTagsInput {
  create?: ProjectCreateWithoutTagsInput[]
  delete?: ProjectWhereUniqueInput[]
  connect?: ProjectWhereUniqueInput[]
  set?: ProjectWhereUniqueInput[]
  disconnect?: ProjectWhereUniqueInput[]
  update?: ProjectUpdateWithWhereUniqueWithoutTagsInput[]
  upsert?: ProjectUpsertWithWhereUniqueWithoutTagsInput[]
  deleteMany?: ProjectScalarWhereInput[]
  updateMany?: ProjectUpdateManyWithWhereNestedInput[]
}
export type ProjectUpdateManyWithoutTagsInputInputObject =
  | Extract<keyof ProjectUpdateManyWithoutTagsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectUpdateWithWhereUniqueWithoutTagsInput {
  where?: ProjectWhereUniqueInput
  data?: ProjectUpdateWithoutTagsDataInput
}
export type ProjectUpdateWithWhereUniqueWithoutTagsInputInputObject =
  | Extract<keyof ProjectUpdateWithWhereUniqueWithoutTagsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateWithoutTagsDataInput {
  name?: string | null
  description?: string | null
  people?: PersonUpdateManyWithoutProjectsInput | null
}
export type ProjectUpdateWithoutTagsDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutTagsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'people', alias?: string  } 
  
export interface ProjectUpsertWithWhereUniqueWithoutTagsInput {
  where?: ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutTagsDataInput
  create?: ProjectCreateWithoutTagsInput
}
export type ProjectUpsertWithWhereUniqueWithoutTagsInputInputObject =
  | Extract<keyof ProjectUpsertWithWhereUniqueWithoutTagsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TagUpdateManyMutationInput {
  name?: string | null
}
export type TagUpdateManyMutationInputInputObject =
  | Extract<keyof TagUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface PersonSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PersonWhereInput | null
  AND?: PersonSubscriptionWhereInput[]
  OR?: PersonSubscriptionWhereInput[]
  NOT?: PersonSubscriptionWhereInput[]
}
export type PersonSubscriptionWhereInputInputObject =
  | Extract<keyof PersonSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectWhereInput | null
  AND?: ProjectSubscriptionWhereInput[]
  OR?: ProjectSubscriptionWhereInput[]
  NOT?: ProjectSubscriptionWhereInput[]
}
export type ProjectSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TagSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TagWhereInput | null
  AND?: TagSubscriptionWhereInput[]
  OR?: TagSubscriptionWhereInput[]
  NOT?: TagSubscriptionWhereInput[]
}
export type TagSubscriptionWhereInputInputObject =
  | Extract<keyof TagSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ProjectOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TagOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PersonOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'gcId_ASC'
  | 'gcId_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  